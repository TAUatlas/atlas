#include <stdlib.h>
#include <time.h>

#include <xdc/std.h>
#include <xdc/runtime/Timestamp.h>
#include <xdc/runtime/Types.h>
#include <xdc/runtime/System.h>

#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Semaphore.h>
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/hal/Timer.h>

#include <ti/drivers/PIN.h>

#include "config.h"
#include "Board.h"

#include "leds.h"

/* Pin driver handle */
static PIN_Handle ledPinHandle;
static PIN_State  ledPinState;

/*
 * Application LED pin configuration table:
 *   - All LEDs board LEDs are off.
 */
PIN_Config pinTable[] = {
		Board_RLED | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
		Board_GLED | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    PIN_TERMINATE
};

static Clock_Params ledsBlinkClockParams;
static Clock_Handle ledsBlinkClock;
static int8_t  ledsBlinkState; // positive x at the end of the x blink, negative x at the end of the x off period
static PIN_Id  ledsBlinkId;
static uint32_t ledsBlinkTicks;
static Timer_Handle ledsTimer;
static Timer_Params timerParams;

static void ledsClockFunction(UArg arg) {
	if (ledsBlinkState == 0) return; //spurious
	Clock_stop(ledsBlinkClock); // start an off period
	Clock_setTimeout(ledsBlinkClock,ledsBlinkTicks);
	//PIN_setOutputValue(ledPinHandle, ledsBlinkId, Board_LED_OFF);
	//return;
	if (ledsBlinkState > 0) {
		PIN_setOutputValue(ledPinHandle, ledsBlinkId, Board_LED_OFF);
		ledsBlinkState--;
		ledsBlinkState = -ledsBlinkState;
		if (ledsBlinkState!=0) Clock_start(ledsBlinkClock); // start an off period
	} else {
		PIN_setOutputValue(ledPinHandle, ledsBlinkId, Board_LED_ON);
		ledsBlinkState = -ledsBlinkState;
		Clock_start(ledsBlinkClock); // start an on period
	}
}

static void ledsTimerFunction(UArg arg) {
	return;
	Timer_stop(ledsTimer);
	if (ledsBlinkState == 0) return; //spurious
	//Clock_stop(ledsBlinkClock); // start an off period
	//Clock_setTimeout(ledsBlinkClock,ledsBlinkTicks);
	//PIN_setOutputValue(ledPinHandle, ledsBlinkId, Board_LED_OFF);
	//return;
	if (ledsBlinkState > 0) {
		PIN_setOutputValue(ledPinHandle, ledsBlinkId, Board_LED_OFF);
		ledsBlinkState--;
		ledsBlinkState = -ledsBlinkState;
		if (ledsBlinkState!=0) Timer_start(ledsTimer); // start an off period
	} else {
		PIN_setOutputValue(ledPinHandle, ledsBlinkId, Board_LED_ON);
		ledsBlinkState = -ledsBlinkState;
		Timer_start(ledsTimer); // start an on period
	}
}

void leds_init() {
	/* Open LED pins */
	ledPinHandle = PIN_open(&ledPinState, pinTable);
	if(!ledPinHandle) {
		System_abort("Error initializing board LED pins\n");
	}

	Clock_Params_init(&ledsBlinkClockParams);
	ledsBlinkClockParams.period = 0; // one-shot clock
	ledsBlinkClockParams.startFlag = FALSE;
	ledsBlinkClockParams.arg = (UArg) 0;

	ledsBlinkTicks = 1000; // (10000 / Clock_tickPeriod); // 10000us = 10ms

	System_printf("leds clock timeout=%d tickPriod=%d\n",ledsBlinkTicks,Clock_tickPeriod);

	ledsBlinkClock = Clock_create(ledsClockFunction, ledsBlinkTicks, &ledsBlinkClockParams, NULL);
	if (ledsBlinkClock == NULL) {
	 System_abort("Clock create failed");
	}

#if 1

	Timer_Params_init(&timerParams);
	timerParams.period = 10000;
	timerParams.periodType = Timer_PeriodType_MICROSECS;
	timerParams.arg = 1;
	timerParams.startMode = Timer_StartMode_USER;
	timerParams.runMode   = Timer_RunMode_ONESHOT;
	ledsTimer = Timer_create(Timer_ANY, ledsTimerFunction, &timerParams, NULL);
	if (ledsTimer == NULL) {
	 System_abort("Timer create failed");
	}
	Types_FreqHz tf;
	Timer_getFreq(ledsTimer,&tf);
	System_printf("timer frequency %d\n",tf.lo);
#endif
}

static PIN_Id leds_get(uint8_t led) {
	if (led == LEDS_RED  ) return Board_RLED;
	if (led == LEDS_GREEN) return Board_GLED;
	return 0xFF; // error
}
void leds_on(uint8_t led) {
	PIN_setOutputValue(ledPinHandle, leds_get(led), Board_LED_ON);
}

void leds_off(uint8_t led) {
	PIN_setOutputValue(ledPinHandle, leds_get(led), Board_LED_OFF);
}

void leds_toggle(uint8_t led) {
	PIN_setOutputValue(ledPinHandle, leds_get(led),!PIN_getOutputValue(leds_get(led)));
}

void leds_blink(uint8_t led, uint8_t howmanytimes) {
	ledsBlinkState = howmanytimes;
	ledsBlinkId    = leds_get(led);
	PIN_setOutputValue(ledPinHandle, ledsBlinkId, Board_LED_ON);
	Clock_setTimeout(ledsBlinkClock,ledsBlinkTicks);
	Clock_start(ledsBlinkClock);
	//Timer_start(ledsTimer);
}
